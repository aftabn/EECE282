                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              2   
0000              3   org 0000H
0000 020184       4            ljmp myprogram
0003              5            
000B              6   org 000BH
000B 020039       7            ljmp ISR_timer0
000E              8            
001B              9   org 001BH
001B 0200C6      10            ljmp ISR_timer1
001E             11   
002B             12   org 002BH
002B 020150      13            ljmp ISR_timer2
002E             14            
0000             15   BSEG
0000             16   meridian:     dbit 1
0001             17   meridianAlarm: dbit 1
0002             18   
0030             19   DSEG at 30H
0030             20   count10ms: ds 1
0031             21   seconds:   ds 1
0032             22   minutes:   ds 1
0033             23   hours:     ds 1
0034             24   secAlarm:  ds 1
0035             25   minAlarm:  ds 1
0036             26   hourAlarm: ds 1
0037             27   
002E             28   CSEG
002E             29   
002E             30   ; Look-up table for 7-segment displays
002E             31   myLUT:
002E C0F9A4B0    32       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0033 9282F880    33       DB 092H, 082H, 0F8H, 080H, 090H
     90
0038 FF          34       DB 0FFH ; All segments off
0039             35   
0039             36   CLK           EQU 33333333
0039             37   FREQ           EQU 100
0039             38   B_FREQ              EQU 2000
0039             39   TIMER0_RELOAD  EQU 65536-(CLK/(12*FREQ))
0039             40   TIMER2_RELOAD  EQU 65536-(CLK/(12*2*B_FREQ))
0039             41   
0039             42   ISR_Timer0:
0039             43            ; Reload the timer
0039 758C93      44       mov TH0, #high(TIMER0_RELOAD)
003C 758A7F      45       mov TL0, #low(TIMER0_RELOAD)
003F             46       
003F             47       ; Save used register into the stack
003F C0D0        48       push psw
0041 C0E0        49       push acc
0043 C083        50       push dph
0045 C082        51       push dpl
0047             52       
0047 B281        53       cpl P0.1
0049             54       
0049 20E839      55       jb SWA.0, ISR_Timer0_L0 ; Setting up time.  Do not increment anything
004C 20E936      56       jb SWA.1, ISR_Timer0_L0 ; Setting up alarm. Ain't gon' increment shit
004F             57       
004F             58       ;Check if clock time matches alarm time
004F             59       ;lcall AlarmCheck
004F             60       
004F             61       ; Increment the counter and check if a second has passed
004F 0530        62       inc count10ms
0051 E530        63       mov a, count10ms
0053 B4642F      64       cjne A, #100, ISR_Timer0_L0
0056 753000      65       mov count10ms, #0
0059             66       
0059 E531        67       mov a, seconds
005B 2401        68       add a, #1
005D D4          69       da a
005E F531        70       mov seconds, a
0060 B46022      71       cjne A, #60H, ISR_Timer0_L0
0063 753100      72       mov seconds, #0
0066             73            
0066 E532        74       mov a, minutes
0068 2401        75       add a, #1
006A D4          76       da a
006B F532        77       mov minutes, a
006D B46015      78       cjne A, #60H, ISR_Timer0_L0
0070 753200      79       mov minutes, #0
0073             80            
0073 E533        81       mov a, hours
0075 2401        82       add a, #1
0077 D4          83       da a
0078 F533        84       mov hours, a
007A B41202      85       cjne A, #12H, NoMeridianChange1
007D B200        86       cpl meridian
007F             87   NoMeridianChange1:
007F B41303      88       cjne A, #13H, ISR_Timer0_L0
0082 753301      89       mov hours, #1
0085             90       
0085             91   ISR_Timer0_L0:
0085             92            ; Update the display.  This happens every 10 ms
0085 90002E      93            mov dptr, #myLUT
0088             94            
0088 120249      95            lcall displayMeridian
008B             96            
008B E531        97            mov a, seconds
008D 540F        98            anl a, #0fH
008F 93          99            movc a, @a+dptr
0090 F593       100            mov HEX2, a
0092 E531       101            mov a, seconds
0094 C4         102            swap a
0095 540F       103            anl a, #0fH
0097 93         104            movc a, @a+dptr
0098 F594       105            mov HEX3, a
009A            106            
009A E532       107            mov a, minutes
009C 540F       108            anl a, #0fH
009E 93         109            movc a, @a+dptr
009F F58E       110            mov HEX4, a
00A1 E532       111            mov a, minutes
00A3 C4         112            swap a
00A4 540F       113            anl a, #0fH
00A6 93         114            movc a, @a+dptr
00A7 F58F       115            mov HEX5, a
00A9            116   
00A9 E533       117            mov a, hours
00AB 540F       118            anl a, #0fH
00AD 93         119            movc a, @a+dptr
00AE F596       120            mov HEX6, a
00B0 E533       121            mov a, hours
00B2 20E402     122            jb acc.4, ISR_Timer0_L1
00B5 74A0       123            mov a, #0A0H
00B7            124   ISR_Timer0_L1:
00B7 C4         125            swap a
00B8 540F       126            anl a, #0fH
00BA 93         127            movc a, @a+dptr
00BB F597       128            mov HEX7, a
00BD            129   
00BD            130            ; Restore used registers
00BD D082       131            pop dpl
00BF D083       132            pop dph
00C1 D0E0       133            pop acc
00C3 D0D0       134            pop psw    
00C5 32         135            reti
00C6            136   
00C6            137   ISR_Timer1:
00C6            138            ; Reload the timer
00C6 E532       139       mov a, minutes
00C8 2401       140       add a, #1
00CA D4         141       da a
00CB 758D93     142       mov TH1, #high(TIMER0_RELOAD)
00CE 758B7F     143       mov TL1, #low(TIMER0_RELOAD)
00D1            144       
00D1            145       ; Save used register into the stack
00D1 C0D0       146       push psw
00D3 C0E0       147       push acc
00D5 C083       148       push dph
00D7 C082       149       push dpl
00D9            150   
00D9            151       ; Increment the counter and check if a second has passed
00D9 0530       152       inc count10ms
00DB E530       153       mov a, count10ms
00DD B4642F     154       cjne A, #100, ISR_Timer1_L0
00E0 753000     155       mov count10ms, #0
00E3            156       
00E3 E531       157       mov a, seconds
00E5 2401       158       add a, #1
00E7 D4         159       da a
00E8 F531       160       mov seconds, a
00EA B46022     161       cjne A, #60H, ISR_Timer1_L0
00ED 753100     162       mov seconds, #0
00F0            163   
00F0 E532       164       mov a, minutes
00F2 2401       165       add a, #1
00F4 D4         166       da a
00F5 F532       167       mov minutes, a
00F7 B46015     168       cjne A, #60H, ISR_Timer1_L0
00FA 753200     169       mov minutes, #0
00FD            170   
00FD E533       171       mov a, hours
00FF 2401       172       add a, #1
0101 D4         173       da a
0102 F533       174       mov hours, a
0104 B41202     175       cjne A, #12H, NoMeridianChange2
0107 B200       176       cpl meridian
0109            177   NoMeridianChange2:
0109 B41303     178       cjne A, #13H, ISR_Timer1_L0
010C 753301     179       mov hours, #1
010F            180    
010F            181   ISR_Timer1_L0:
010F            182            ; Update the display.  This happens every 10 ms
010F 90002E     183            mov dptr, #myLUT
0112            184            
0112 120254     185            lcall displayMeridianAlarm
0115            186            
0115 E534       187            mov a, secAlarm
0117 540F       188            anl a, #0fH
0119 93         189            movc a, @a+dptr
011A F593       190            mov HEX2, a
011C E534       191            mov a, secAlarm
011E C4         192            swap a
011F 540F       193            anl a, #0fH
0121 93         194            movc a, @a+dptr
0122 F594       195            mov HEX3, a
0124            196            
0124 E535       197            mov a, minAlarm
0126 540F       198            anl a, #0fH
0128 93         199            movc a, @a+dptr
0129 F58E       200            mov HEX4, a
012B E535       201            mov a, minAlarm
012D C4         202            swap a
012E 540F       203            anl a, #0fH
0130 93         204            movc a, @a+dptr
0131 F58F       205            mov HEX5, a
0133            206            
0133 E536       207            mov a, hourAlarm
0135 540F       208            anl a, #0fH
0137 93         209            movc a, @a+dptr
0138 F596       210            mov HEX6, a
013A E536       211            mov a, hourAlarm
013C 20E402     212            jb acc.4, ISR_Timer1_L1
013F 74A0       213            mov a, #0A0H
0141            214   ISR_Timer1_L1:
0141 C4         215            swap a
0142 540F       216            anl a, #0fH
0144 93         217            movc a, @a+dptr
0145 F597       218            mov HEX7, a
0147            219   
0147            220            ; Restore used registers
0147 D082       221            pop dpl
0149 D083       222            pop dph
014B D0E0       223            pop acc
014D D0D0       224            pop psw    
014F 32         225            reti
0150            226   
0150            227   ISR_timer2:
0150 C2CF       228            clr TF2
0152 B280       229            cpl P0.0
0154 32         230            reti 
0155            231            
0155            232   Init_Timers:
0155            233            ;Timer 0        
0155 758911     234            mov TMOD,  #00010001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0158 C28C       235            clr TR0 ; Disable timer 0
015A C28D       236            clr TF0
015C 758C93     237       mov TH0, #high(TIMER0_RELOAD)
015F 758A7F     238       mov TL0, #low(TIMER0_RELOAD)
0162 D28C       239       setb TR0 ; Enable timer 0
0164 D2A9       240       setb ET0 ; Enable timer 0 interrupt
0166            241       
0166            242       ;Timer 1
0166 C28E       243       clr TR1 ; Disable timer 1
0168 C28F       244            clr TF1
016A 758D93     245       mov TH1, #high(TIMER0_RELOAD)
016D 758B7F     246       mov TL1, #low(TIMER0_RELOAD)
0170 D2AB       247       setb ET1 ; Enable timer 1 interrupt
0172            248       
0172 D2BD       249       setb PT2
0174 75C800     250       mov T2CON, #00H ; Autoreload is enabled, work as a timer
0177 C2CA       251       clr TR2
0179 C2CF       252       clr TF2
017B            253       ; Set up timer 2 to interrupt every 10ms
017B 75CBFD     254       mov RCAP2H,#high(TIMER2_RELOAD)
017E 75CA4A     255       mov RCAP2L,#low(TIMER2_RELOAD)
0181 D2AD       256       setb ET2
0183 22         257       ret
0184            258   
0184            259   myprogram:
0184 75817F     260            mov SP, #7FH
0187 75E800     261            mov LEDRA,#0
018A 759500     262            mov LEDRB,#0
018D 759E00     263            mov LEDRC,#0
0190 75F800     264            mov LEDG,#0
0193 759A03     265            mov P0MOD, #00000011B
0196 D280       266            setb P0.0
0198            267            
0198 753100     268            mov seconds, #00H
019B 753200     269            mov minutes, #00H
019E 753308     270            mov hours, #08H
01A1 C200       271            clr     meridian
01A3            272            
01A3 753400     273            mov secAlarm, #00H
01A6 753500     274            mov minAlarm, #00H
01A9 753608     275            mov hourAlarm, #08H
01AC C201       276            clr     meridianAlarm
01AE            277            
01AE            278   
01AE 120155     279            lcall Init_Timers
01B1 D2AF       280       setb EA  ; Enable all interrupts
01B3            281   
01B3            282   Choice:
01B3 12026B     283            lcall alarmCheck
01B6 20E805     284            jb SWA.0, M0
01B9 20E946     285            jb SWA.1, Alarm
01BC 80F5       286            sjmp Choice
01BE            287            
01BE            288   ; Setting the clock      
01BE            289   M0:      
01BE 20FB15     290            jb KEY.3, M1
01C1 30FBFD     291       jnb KEY.3, $
01C4 E533       292       mov a, hours
01C6 2401       293            add a, #1
01C8 D4         294            da a
01C9 F533       295            mov hours, a
01CB B41202     296            cjne A, #12H, NoMeridianChange3
01CE B200       297       cpl meridian
01D0            298   NoMeridianChange3:
01D0 B41303     299       cjne A, #13H, M1
01D3 753301     300       mov hours, #1
01D6            301   
01D6            302   M1:      
01D6 20FA10     303            jb KEY.2, M2
01D9 30FAFD     304       jnb KEY.2, $
01DC E532       305       mov a, minutes
01DE 2401       306            add a, #1
01E0 D4         307            da a
01E1 F532       308            mov minutes, a
01E3 B46003     309       cjne A, #60H, M2
01E6 753200     310       mov minutes, #0
01E9            311   
01E9            312   M2:      
01E9 20F910     313            jb KEY.1, M3
01EC 30F9FD     314            jnb KEY.1, $
01EF E531       315            mov a, seconds
01F1 2401       316            add a, #1
01F3 D4         317            da a
01F4 F531       318            mov seconds, a
01F6 B46003     319       cjne A, #60H, M3
01F9 753100     320       mov seconds, #0
01FC            321   
01FC            322   M3:      
01FC 30E8B4     323            jnb SWA.0, Choice
01FF 0201BE     324            ljmp M0
0202            325   
0202            326   ; Alarm mode
0202            327            
0202            328   Alarm:
0202 12025F     329            lcall setAlarmTime
0205            330   N0:
0205 20FB15     331            jb KEY.3, N1
0208 30FBFD     332       jnb KEY.3, $
020B E536       333       mov a, hourAlarm
020D 2401       334            add a, #1
020F D4         335            da a
0210 F536       336            mov hourAlarm, a
0212 B41202     337            cjne A, #12H, NoMeridianChange4
0215 B201       338       cpl meridianAlarm
0217            339   NoMeridianChange4:
0217 B41303     340       cjne A, #13H, N1
021A 753601     341       mov hourAlarm, #1
021D            342   
021D            343   N1:      
021D 20FA10     344            jb KEY.2, N2
0220 30FAFD     345       jnb KEY.2, $
0223 E535       346       mov a, minAlarm
0225 2401       347            add a, #1
0227 D4         348            da a
0228 F535       349            mov minAlarm, a
022A B46003     350       cjne A, #60H, N2
022D 753500     351       mov minAlarm, #0
0230            352   
0230            353   N2:      
0230 20F910     354            jb KEY.1, N3
0233 30F9FD     355            jnb KEY.1, $
0236 E534       356            mov a, secAlarm
0238 2401       357            add a, #1
023A D4         358            da a
023B F534       359            mov secAlarm, a
023D B46003     360       cjne A, #60H, N3
0240 753400     361       mov secAlarm, #0
0243            362   
0243            363   N3:      
0243 30E91E     364            jnb SWA.1, restoreTime
0246 020205     365            ljmp N0
0249            366   
0249            367   displayMeridian:
0249 200004     368            jb meridian, night
024C 759108     369            mov HEX0, #08H
024F 22         370            ret
0250            371   night:
0250 75918C     372            mov HEX0, #8CH
0253 22         373            ret
0254            374   
0254            375   displayMeridianAlarm:
0254 200104     376            jb meridianAlarm, night2
0257 759108     377            mov HEX0, #08H
025A 22         378            ret
025B            379   night2:
025B 75918C     380            mov HEX0, #8CH
025E 22         381            ret
025F            382            
025F            383   setAlarmTime:
025F C28C       384            clr TR0
0261 D28E       385            setb TR1
0263 22         386            ret
0264            387            
0264            388   restoreTime:
0264 C28E       389            clr TR1
0266 D28C       390            setb TR0
0268 0201B3     391            ljmp Choice
026B            392            
026B            393   alarmCheck:
026B C3         394       clr c
026C E500       395            mov a, meridian
026E 9501       396            subb a, meridianAlarm
0270 6001       397            jz hourCheck
0272 22         398            ret
0273            399   hourCheck:
0273 C3         400            clr c
0274 E533       401            mov a, hours
0276 9536       402            subb a, hourAlarm
0278 6001       403            jz minCheck
027A 22         404            ret
027B            405   minCheck:
027B C3         406            clr c
027C E532       407            mov a, minutes
027E 9535       408            subb a, minAlarm
0280 6001       409            jz secCheck
0282 22         410            ret
0283            411   secCheck:
0283 C3         412            clr c
0284 E531       413            mov a, seconds
0286 9534       414            subb a, secAlarm
0288 6001       415            jz triggerAlarm
028A 22         416            ret
028B            417   triggerAlarm:
028B D2CA       418            setb TR2
028D            419   waitForButton:
028D 20FBFD     420            jb KEY.3, waitForButton
0290 30FBFD     421            jnb KEY.3, $
0293 C2CA       422            clr TR2
0295 22         423            ret
0296            424   END
