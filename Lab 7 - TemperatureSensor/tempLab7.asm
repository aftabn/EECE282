$modde2

	CSEG at 0
	ljmp MyProgram

dseg at 30h
x:    ds 2
y:    ds 2
bcd:  ds 3

bseg
mf:   dbit 1

	CSEG

myTable:
	DW 400, 399, 397, 396, 395, 393, 392, 390, 389, 388, 386, 385, 384, 382, 381, 380, 378, 377, 375, 374, 373, 371, 370, 369, 367, 366, 364, 363, 362, 360, 359, 358, 356, 355, 354, 352, 351, 349, 348, 347, 345, 344, 343, 341, 340, 339, 337, 336, 334, 333, 332, 330, 329, 328, 326, 325, 324, 322, 321, 319, 318, 317, 315, 314, 313, 311, 310, 309, 307, 306, 304, 303, 302, 300, 299, 298, 296, 295, 293, 292, 291, 289, 288, 287, 285, 284, 283, 281, 280, 278, 277, 276, 274, 273, 272, 270, 269, 268, 266, 265, 263, 262, 261, 259, 258, 257, 255, 254, 253, 251, 250, 248, 247, 246, 244, 243, 242, 240, 239, 238, 236, 235, 233, 232, 231, 229, 228, 227, 225, 224, 222, 221, 220, 218, 217, 216, 214, 213, 212, 210, 209, 207, 206, 205, 203, 202, 201, 199, 198, 197, 195, 194, 192, 191, 190, 188, 187, 186, 184, 183, 182, 180, 179, 177, 176, 175, 173, 172, 171, 169, 168, 166, 165, 164, 162, 161, 160, 158, 157, 156, 154, 153, 151, 150, 149, 147, 146, 145, 143, 142, 141, 139, 138, 136, 135, 134, 132, 131, 130, 128, 127, 126, 124, 123, 121, 120, 119, 117, 116, 115, 113, 112, 111, 109, 108, 106, 105, 104, 102, 101, 100, 98, 97, 95, 94, 93, 91, 90, 89, 87, 86, 85, 83, 82, 80, 79, 78, 76, 75, 74, 72, 71, 70, 68, 67, 65, 64, 63, 61, 60, 59, 57, 56, 55, 53, 52, 50, 49, 48, 46, 45, 44, 42, 41, 40, 38, 37, 35, 34, 33, 31, 30, 29, 27, 26, 24, 23, 22, 20, 19, 18, 16, 15, 14, 12, 11, 9, 8, 7, 5, 4, 3, 1, 0, 1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 96, 97, 98, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 219, 220, 221, 223, 224, 225, 227, 228, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 249, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 285, 287, 288, 290, 291, 292, 294, 295, 296, 298, 299, 301, 302, 303, 305, 306, 307, 309, 310, 311, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 333, 335, 336, 337, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 499, 500, 501, 503, 504, 505, 507, 508, 509, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 587, 589, 590, 591, 593, 594, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 641, 642, 643, 645, 646, 647, 649, 650, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 739, 740, 742, 743, 744, 746, 747, 748, 750, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 765, 766, 768, 769, 770, 772, 773, 774, 776, 777, 778, 780, 781, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 808, 810, 811, 813, 814, 815, 817, 818, 819, 821, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 848, 849, 851, 852, 854, 855, 856, 858, 859, 860, 862, 863, 864, 866, 867, 869, 870, 871, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 903, 904, 905, 907, 908, 910, 911, 912, 914, 915, 916, 918, 919, 920, 922, 923, 925, 926, 927, 929, 930, 931, 933, 934, 935, 937, 938, 940, 941, 942, 944, 945, 946, 948, 949, 951, 952, 953, 955, 956, 957, 959, 960, 961, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 996, 997
	
	
myLUT:
    DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
    DB 092H, 082H, 0F8H, 080H, 090H  ; 4 TO 9
   ;DB 088H, 083H, 0C6H, 0A1H, 086H, 08EH  ; A to F

ClearDisplay:
	MOV 91H, #40H
	MOV 92H, #40H
	MOV 93H, #40H
	MOV 94H, #40H
	mov bcd+0, #00H
	mov bcd+1, #00H
	mov bcd+2, #00H
	ret

;GetTempVal:
;	mov x+0, dpl
;	mov x+1, dph
;	ret

ReadNumber:
	mov R7, SWA ; Read switches 0 to 7
	mov a, SWB ; Read switches 8 to 15
	anl a, #00000011B
	mov R6, a
	ret
	
;ADC2Temp:
;	mov dptr, #myTable
;	mov a, R7
;	mov b, #2
;	mul ab
;	add a, dpl
;	mov dpl, a
;	
;	mov R5, b
;	mov a, R6
;	rlc a
;	add a, R5
;	addc a, dph
;	mov dph, a
;	ret

MyProgram:
	mov SP, #7FH
	clr a
	mov LEDRA, a
	mov LEDRB, a
	mov LEDRC, a
	mov LEDG, a
	mov bcd+0, a
	mov bcd+1, a
	mov bcd+2, a
	lcall DisplayPos

Main:
	;lcall ClearDisplay
	lcall ReadNumber
	lcall ADC2Temp
	;lcall GetTempVal
	lcall hex2BCD
	lcall NegCheck
	;lcall Display
	sjmp Main
	
ADC2Temp:
	mov dptr, #mytable
	mov a, R7 ; R7 has the conversion value
	mov b, #2
	mul ab
	add a, dpl
	mov dpl, a
	
	mov a, R6
	rlc a
	add a, b
	addc a, dph
	mov dph, a
	
	clr a
	movc a, @a+dptr
	mov x+1, a ; High part from the lookup table
	inc dptr
	clr a
	movc a, @a+dptr
	mov x+0, a ; Low part from the lookup table
	ret
	
;----------------------------------------------------
; Converts the 16-bit hex number in 'x' to a 
; 5-digit packed BCD in 'bcd' using the
; double-dabble algorithm.
;---------------------------------------------------
hex2bcd:
	push acc
	push psw
	push AR0
	
	clr a
	mov bcd+0, a ; Initialize BCD to 00-00-00 
	mov bcd+1, a
	mov bcd+2, a
	mov r0, #16  ; Loop counter.

hex2bcd_L0:
	; Shift binary left	
	mov a, x+1
	mov c, acc.7 ; This way x remains unchanged!
	mov a, x+0
	rlc a
	mov x+0, a
	mov a, x+1
	rlc a
	mov x+1, a
    
	; Perform bcd + bcd + carry using BCD arithmetic
	mov a, bcd+0
	addc a, bcd+0
	da a
	mov bcd+0, a
	mov a, bcd+1
	addc a, bcd+1
	da a
	mov bcd+1, a
	mov a, bcd+2
	addc a, bcd+2
	da a
	mov bcd+2, a

	djnz r0, hex2bcd_L0

	pop AR0
	pop psw
	pop acc
	ret

DisplayPos:
	mov dptr, #myLUT
	; Display Digit 0
    mov A, bcd+0
    anl a, #0fh
    movc A, @A+dptr
    mov HEX0, A
	; Display Digit 1
    mov A, bcd+0
    swap a
    anl a, #0fh
    movc A, @A+dptr
    mov HEX1, A
	; Display Digit 2
    mov A, bcd+1
    anl a, #0fh
    movc A, @A+dptr
    mov HEX2, A
	; Display Digit 3
    mov A, bcd+1
    swap a
    anl a, #0fh
    movc A, @A+dptr
    mov HEX3, A
	ret
	
DisplayNeg:
	mov dptr, #myLUT
	; Display Digit 0
    mov A, bcd+0
    anl a, #0fh
    movc A, @A+dptr
    mov HEX0, A
	; Display Digit 1
    mov A, bcd+0
    swap a
    anl a, #0fh
    movc A, @A+dptr
    mov HEX1, A
	; Display Digit 2
    mov A, bcd+1
    anl a, #0fh
    movc A, @A+dptr
    mov HEX2, A
	; Display Digit 3
    mov HEX3, #03FH
    ret
	
NegCheck:
mov a, R6
Bit9:
	jb Acc.1, ReturnPos
	
Bit8:
	jnb Acc.0, ReturnNeg

CheckSWA:
	mov a, R7
	jb Acc.7, ReturnPos
	jb Acc.6, ReturnPos
	jnb Acc.5, ReturnNeg	
	
Bit5Case:
	jb Acc.4, ReturnPos
	jb Acc.3, ReturnPos
	jnb Acc.2, ReturnNeg

Bit3Case:	
	jb Acc.1, ReturnPos
	jb Acc.0, ReturnPos
	
ReturnNeg:
	lcall DisplayNeg
	ret
ReturnPos:
	lcall DisplayPos
	ret
end